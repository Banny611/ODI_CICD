<?xml version="1.0" encoding="UTF-8"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.09" IsLegacyIdCompatible="false" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="4pGakC9AHoyyRSciETfDkQEfoHZFKSgZ7YcsSYCV+So=" keyVect="5w8hOsj9cS5r2hKFo6Ai+A==" exportKeySalt="489b81a8-0321-462e-b361-6512effb00cb" containsCipherText="false"/>
<Object class="com.sunopsis.dwg.dbobj.SnpTrt">
		<Field name="CleanupOnError" type="java.lang.String">null</Field>
	<Field name="CompType" type="java.lang.String">null</Field>
	<Field name="DelegateClass" type="java.lang.String">null</Field>
	<Field name="DelegateScript" type="java.lang.String">null</Field>
	<Field name="ExpectedAstClass" type="java.lang.String">null</Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-08-27 16:47:46.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[38e0215c-2ea2-48f1-94ad-9d4a2017b900]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[U]]></Field>
	<Field name="IndExcludeExUnitBegin" type="java.lang.String">null</Field>
	<Field name="IndExcludeExUnitEnd" type="java.lang.String">null</Field>
	<Field name="IndExcludeExUnitMain" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapBegin" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapCleanup" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapEnd" type="java.lang.String">null</Field>
	<Field name="IndGenerateLoad" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndIsHidden" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IndJrnMethod" type="java.lang.String"><![CDATA[S]]></Field>
	<Field name="IndSuppSetBased" type="java.lang.String">null</Field>
	<Field name="IntgType" type="java.lang.String">null</Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="IsConcurrent" type="java.lang.String">null</Field>
	<Field name="IsSeeded" type="java.lang.String">null</Field>
	<Field name="IBaseCompKm" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IProject" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="IScBaseTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScOrigTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[327]]></Field>
	<Field name="ITxtDelTxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITxtTrtTxt" type="com.sunopsis.sql.DbInt"><![CDATA[6551]]></Field>
	<Field name="KimMultiDserver" type="java.lang.String">null</Field>
	<Field name="KmDefault" type="java.lang.String">null</Field>
	<Field name="KmLang" type="java.lang.String">null</Field>
	<Field name="KmSrcLang" type="java.lang.String">null</Field>
	<Field name="KmSrcTechno" type="java.lang.String">null</Field>
	<Field name="KmTechno" type="java.lang.String"><![CDATA[ORACLE]]></Field>
	<Field name="KmVersion" type="java.lang.String"><![CDATA[15]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-08-27 16:47:46.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LkmType" type="java.lang.String">null</Field>
	<Field name="LChecksum" type="com.sunopsis.sql.DbInt"><![CDATA[1204367100]]></Field>
	<Field name="LCode" type="java.lang.String">null</Field>
	<Field name="OggJkm" type="java.lang.String">null</Field>
	<Field name="OrdFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ProcType" type="java.lang.String">null</Field>
	<Field name="ProdAstType" type="java.lang.String">null</Field>
	<Field name="RepGuid" type="java.lang.String">null</Field>
	<Field name="RepVersion" type="java.lang.String">null</Field>
	<Field name="ScriptPath" type="java.lang.String">null</Field>
	<Field name="ScOrigTrtTag" type="java.lang.String">null</Field>
	<Field name="Subtype" type="java.lang.String">null</Field>
	<Field name="TrtName" type="java.lang.String"><![CDATA[SKM Oracle]]></Field>
	<Field name="TrtType" type="java.lang.String"><![CDATA[KS]]></Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
	<Field name="VLastDate" type="java.sql.Timestamp">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[04659f12-d651-4b5f-961b-999c42ba4c31]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[6551]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[107]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[COMPONENT NAME: SKM Oracle

AUTHOR: Oracle



Description:
- Service Knowledge Module
- Generate Web services for an Oracle DI model. For each Datastore this SKM create theses methods:
	add<DATASTORE_NAME>
	add<DATASTORE_NAME>List
	delete<DATASTORE_NAME>
	delete<DATASTORE_NAME>Filter
	delete<DATASTORE_NAME>List
	get<DATASTORE_NAME>
	get<DATASTORE_NAME>Filter
	get<DATASTORE_NAME>List
	update<DATASTORE_NAME>
	update<DATASTORE_NAME>Filter
	update<DATASTORE_NAME>List
-When using this module with a journalized source table others methods are added.
	consumeChanged<DATASTORE_NAME>
	getChanged<DATASTORE_NAME>

-When inserting updating data, this module controls the validity of the constraints of the Datastore and rejects the invalid records.


Restrictions:
- Primary key is mandatory for any datastore.
]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="GlobalId" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[107]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Edit Command]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_TRT_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpLineTrt">
		<Field name="AlwaysExe" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="BrpId" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColConnectId" type="java.lang.String">null</Field>
	<Field name="ColContextCode" type="java.lang.String">null</Field>
	<Field name="ColIndCommit" type="java.lang.String">null</Field>
	<Field name="ColIsolLevel" type="java.lang.String">null</Field>
	<Field name="ColITxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ColLanguage" type="java.lang.String">null</Field>
	<Field name="ColLschemaName" type="java.lang.String">null</Field>
	<Field name="ColTechno" type="java.lang.String">null</Field>
	<Field name="DefConnectId" type="java.lang.String">null</Field>
	<Field name="DefContextCode" type="java.lang.String">null</Field>
	<Field name="DefIndCommit" type="java.lang.String">null</Field>
	<Field name="DefIsolLevel" type="java.lang.String">null</Field>
	<Field name="DefITxt" type="com.sunopsis.sql.DbInt"><![CDATA[6552]]></Field>
	<Field name="DefLanguage" type="java.lang.String">null</Field>
	<Field name="DefLschemaName" type="java.lang.String">null</Field>
	<Field name="DefTechno" type="java.lang.String">null</Field>
	<Field name="ExeChannel" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2021-08-27 16:47:46.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[394ba789-de3e-4977-8dfc-f974bb834261]]></Field>
	<Field name="IndErr" type="java.lang.String">null</Field>
	<Field name="IndLogFinalCmd" type="java.lang.String">null</Field>
	<Field name="IndLogNb" type="java.lang.String">null</Field>
	<Field name="ILineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[3618]]></Field>
	<Field name="IRefLineTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IRefTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[327]]></Field>
	<Field name="KcmAk" type="java.lang.String">null</Field>
	<Field name="KcmCond" type="java.lang.String">null</Field>
	<Field name="KcmErrDel" type="java.lang.String">null</Field>
	<Field name="KcmJoin" type="java.lang.String">null</Field>
	<Field name="KcmNull" type="java.lang.String">null</Field>
	<Field name="KcmPk" type="java.lang.String">null</Field>
	<Field name="KimDrvdSel" type="java.lang.String">null</Field>
	<Field name="KimIdx" type="java.lang.String">null</Field>
	<Field name="KimJrn" type="java.lang.String">null</Field>
	<Field name="KimJrnPop" type="java.lang.String">null</Field>
	<Field name="KjmCreate" type="java.lang.String">null</Field>
	<Field name="KjmDrop" type="java.lang.String">null</Field>
	<Field name="KjmExtend" type="java.lang.String">null</Field>
	<Field name="KjmInstall" type="java.lang.String">null</Field>
	<Field name="KjmLock" type="java.lang.String">null</Field>
	<Field name="KjmPurge" type="java.lang.String">null</Field>
	<Field name="KjmSetInstall" type="java.lang.String">null</Field>
	<Field name="KjmSetUninstall" type="java.lang.String">null</Field>
	<Field name="KjmSubscribe" type="java.lang.String">null</Field>
	<Field name="KjmTableOrder" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KjmUninstall" type="java.lang.String">null</Field>
	<Field name="KjmUnlock" type="java.lang.String">null</Field>
	<Field name="KjmUnsubscribe" type="java.lang.String">null</Field>
	<Field name="KlmAfterInt" type="java.lang.String">null</Field>
	<Field name="KlmIdx" type="java.lang.String">null</Field>
	<Field name="KlmJrn" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2021-08-27 16:47:46.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LineType" type="java.lang.String">null</Field>
	<Field name="LogLevDet" type="java.lang.String"><![CDATA[3]]></Field>
	<Field name="MapTaskType" type="java.lang.String">null</Field>
	<Field name="OrdTrt" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="SqlName" type="java.lang.String"><![CDATA[SKMLine]]></Field>
	<Field name="SupportedSubtypes" type="java.lang.String">null</Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[60df8445-feec-4523-b422-53c798d05835]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[6552]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[2]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[package <%=odiRef.getTargetTable("WS_JAVA_PACKAGE")%>;

<% if (!odiRef.hasPK()) { %>
<% throw new OdiKMException("ODIKM-STDKM-10017", "ODIKM-STDKM-10017: The datastore must have a primary key" );%> 	
<% } %>

import java.awt.print.Printable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;


import oracle.odi.dataservices.fwk.ColumnsMeta;
import oracle.odi.dataservices.fwk.DataServiceMeta;
import oracle.odi.dataservices.fwk.DataServiceVoid;
import oracle.odi.dataservices.fwk.ManagedEntity;
import oracle.odi.dataservices.fwk.ManagedEntityList;
import oracle.odi.dataservices.fwk.QueryFilter;
import oracle.odi.dataservices.fwk.QueryResponse;
import oracle.odi.dataservices.fwk.IDataService;
import oracle.odi.dataservices.fwk.DataServiceException;
import oracle.odi.dataservices.fwk.UpdateFilter;
import oracle.odi.dataservices.fwk.CDCQuery;
import oracle.odi.dataservices.fwk.CDCManagedEntityList;
import oracle.odi.dataservices.fwk.Utils;
import oracle.odi.dataservices.fwk.UpdateDeleteFilter;
import oracle.odi.dataservices.fwk.OdiSKMException;

public class <%=odiRef.getTargetTable("WS_NAME")%> implements IDataService
{
	private DataServiceMeta mDataServiceMeta;
	private static final String mDualTable = " from DUAL";
	//from dual for Oracle RDBMS
	//from sysibm.sysdummy1 for IBM UDB
	//null for SqlServer, Acces, teradata, Mysql, Netezza, PostgreSQL, Sybase
	//FROM SYSTEM_ALLTYPEINFO for HSQL
	//FROM INFORMIX.SYSTABLES for informix
	
	public List mMandatorys = new ArrayList();
	public List mUniqueKeys = new ArrayList();
	public List mConditions = new ArrayList();
	public List mReferences = new ArrayList();
	
	
	private static final String FULLY_QUALIFIED_TABLE_NAME = "\u005c\u0022<%=odiRef.getTargetTable( "SCHEMA")%>\u005c\u0022.\u005c\u0022<%=odiRef.getTargetTable( "RES_NAME")%>\u005c\u0022";
	private static final String ALIAS_TABLE_NAME =  "<%=odiRef.getTargetTable("TABLE_ALIAS")%>";
	private static final String TAB_ALIAS_WORD =  "<%=odiRef.getInfo("SRC_TAB_ALIAS_WORD")%>";
	private static final String COL_ALIAS_WORD =  "<%=odiRef.getInfo("SRC_COL_ALIAS_WORD")%>";
	private static final List TABLE_COLUMNS = Arrays.asList(new String[]  { <%=odiRef.getTargetColList("", "\u0022[COL_NAME]\u0022", ", ", "", "")%>	});	
	private static final List MANDATORY_COLUMNS = Arrays.asList(new String[] {<%=odiRef.getTargetColList("", "\u0022[COL_MANDATORY]\u0022", ", ", "", "")%>	});		
	private static final List PK_COLUMNS = Arrays.asList(new String[] {	<%=odiRef.getPKColList("", "\u0022[COL_NAME]\u0022", ", ", "")%>});
	private static final List SELECT_COLUMNS = Arrays.asList(new String[] {	<%=odiRef.getTargetColList("", "\u0022[COL_NAME]\u0022", ", ", "", "WS_SEL")%>});		
	private static final List INSERT_COLUMNS = Arrays.asList(new String[] {	<%=odiRef.getTargetColList("", "\u0022[COL_NAME]\u0022", ", ", "", "WS_INS")%>});
	private static final List UPDATE_COLUMNS = Arrays.asList(new String[] {	<%=odiRef.getTargetColList("", "\u0022[COL_NAME]\u0022", ", ", "", "WS_UPD")%>});	
	
	public <%=odiRef.getTargetTable("WS_NAME")%>()
	{
		String[] colsName = new String[] {
				<%=odiRef.getTargetColList("", "\u0022[COL_NAME]\u0022", ", ", "", "WS_SEL || WS_INS || WS_UPD")%>
		};
		int[] colsJdbcTypes = new int[] {
				<%=odiRef.getTargetColList("", "[JDBC_TYPE]", ", ", "", "WS_SEL || WS_INS || WS_UPD")%>
		};
		boolean[] colsNullable = new boolean[] {
				<%=odiRef.getTargetColList("", "[COL_MANDATORY]==0", ", ", "", "WS_SEL || WS_INS || WS_UPD")%>
		};		
		String[] colsDescription = new String[] {
				<%=odiRef.getTargetColList("", "\u0022[COL_HEADING]\u0022", ", ", "", "WS_SEL || WS_INS || WS_UPD")%>
		};
		String[] pkColumns = new String[] {
				<%=odiRef.getPKColList("", "\u0022[COL_NAME]\u0022", ", ", "")%>
		};		
		
		String conditionSql=null;
		String conditionMess=null;

		
		ColumnsMeta cMetas = new ColumnsMeta(colsName, colsJdbcTypes, colsNullable, colsDescription, pkColumns);
		mDataServiceMeta = new DataServiceMeta("<%=odiRef.getTargetTable("WS_NAMESPACE")%>/<%=odiRef.getTargetTable("WS_NAME")%>", "<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>", cMetas);
		
		//List of mandatory columns 
		for (int i = 0 ; i < TABLE_COLUMNS.size() ; i++)
		{
			if (MANDATORY_COLUMNS.get(i).toString()=="1")
				{mMandatorys.add(new MandatoryColumn(TABLE_COLUMNS.get(i).toString()));}
		}
		
		// add the primary key on the list of the unique key
		mUniqueKeys.add(new UniqueKey("<%=odiRef.getPK("KEY_NAME")%>",Arrays.asList(pkColumns),"Unable to insert or update row, duplicate key in Primary Key : <%=odiRef.getPK("KEY_NAME")%>"));

		<% while (odiRef.nextAK() ) { %>
		{
		//adding the alternate key : <%=odiRef.getAK("KEY_NAME")%> to the list of the unique key	
		List mAkColumns  = new ArrayList();	
		<%=odiRef.getAKColList("", "mAkColumns.add(\u0022[COL_NAME]\u0022);", "\n\t\t", "")%>
		mUniqueKeys.add(new UniqueKey("<%=odiRef.getAK("KEY_NAME")%>",mAkColumns,"Unable to insert or update row, duplicate key in Alternate Key : <%=odiRef.getAK("KEY_NAME")%> "));
		}
		<% } %>	

		<% while (odiRef.nextCond() ) { %>
		// adding the condition : <%=odiRef.getCK("COND_NAME")%> to the list of the conditions
		conditionSql=<%=odiRef.getQuotedString(odiRef.getCK("COND_SQL"))%>;
		conditionMess = <%=odiRef.getQuotedString(odiRef.getCK("MESS"))%>;

		mConditions.add(new Constraint("<%=odiRef.getCK("COND_NAME")%>","("+conditionSql+")","Unable to insert or update row, condition violation : "+conditionMess));
		<% } %>	

		<% while (odiRef.nextFK() ) { %>
		{
			// adding the reference : <%=odiRef.getFK("FK_NAME")%> to the list of the references	
		String mRefSql = new String();
		<%if (odiRef.getFK("COMPLEX_SQL").equals("")) {%>  
		mRefSql =  " ( ";
		mRefSql += " exists (select 1 from ";
		mRefSql += "<%=odiRef.getTable("L", "FK_PK_TABLE_NAME", "A")%> <%=odiRef.getInfo("DEST_TAB_ALIAS_WORD")%> ODI_ALIAS where ";
		mRefSql += "<%=odiRef.getFKColList("(", odiRef.getTargetTable("TABLE_ALIAS")+".[COL_NAME] = ODI_ALIAS.[PK_COL_NAME]", " and ", ")" )%>";
		mRefSql += "    ) ";
		mRefSql +=" or <%=odiRef.getFKColList(" ( ", odiRef.getTargetTable("TABLE_ALIAS")+".[COL_NAME] is null", " and ", " ) ")%>";		
		mRefSql += " ) ";
		<%} else {%>   
		mRefSql = " exists (select 1 from ";
		mRefSql += "<%=odiRef.getTable("L", "FK_PK_TABLE_NAME", "A")%> <%=odiRef.getInfo("DEST_TAB_ALIAS_WORD")%> <%=odiRef.getFK("PK_ALIAS")%> where ";
		mRefSql += <%=odiRef.getQuotedString(odiRef.getFK("COMPLEX_SQL"))%>;
		mRefSql += ")";
		<%}%>   
		mReferences.add(new Constraint("<%=odiRef.getFK("FK_NAME")%>",mRefSql,"Unable to insert or update row, reference Key violation : <%=odiRef.getFK("FK_NAME")%>"));
		}
		<% } %>
	}
	
	
	
	public class MandatoryColumn
	{
		private String mColName;
		private String mMessage;
		
		public MandatoryColumn(String pColName)
		{
			mColName = pColName;
			mMessage = "Unable to insert or update to null a mandatory column :" + mColName;
		}
		private boolean CheckIns (Connection pConnection,ManagedEntity pManagedEntity)
		{
			return (pManagedEntity.isColumnDefined(mColName) && pManagedEntity.getColumnValue(mColName) != null);
		}
		private boolean CheckUpdByPk (Connection pConnection,ManagedEntity pManagedEntity)
		{
			return (!pManagedEntity.isColumnDefined(mColName) || pManagedEntity.getColumnValue(mColName) != null);
		}
		private boolean CheckUpdByFilter(Connection pConnection,UpdateFilter pUpdateFilter)
		{
			return (!pUpdateFilter.getManagedEntity().isColumnDefined(mColName) || pUpdateFilter.getManagedEntity().getColumnValue(mColName) != null);
		}
	}
	public class UniqueKey 
	{	

		private String mKeyName;
		private List mKeyColsName;
		private String mMessage;
		//private List mInsertColumns;
		
		public UniqueKey(String pKeyName, List pKeyColsName,String pMessage) 
		{
			mKeyName = pKeyName;
			mKeyColsName = pKeyColsName;
			mMessage = pMessage;
		}
		//CheckIns return true the key doesnt existe in the table else return false
		private boolean CheckIns(Connection pConnection,ManagedEntity pManagedEntity) throws DataServiceException
		{ 
			PreparedStatement st = null;
			ResultSet rs = null;
			String query = null;
		try{
			String whereClause = Utils.concatStrings(mKeyColsName, null, "=?", " AND ");
			query = Utils.createSelectQuery(mKeyColsName, FULLY_QUALIFIED_TABLE_NAME, whereClause, null);
			st = pConnection.prepareStatement(query);
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pManagedEntity, mKeyColsName);
			rs = st.executeQuery();
			return rs.next();
			}
		catch (DataServiceException e) {
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		catch (SQLException e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-10018", "ODIKM-STDKM-10018: Failed to execute the query : {0}", new Object[] {query});
		}
			
			finally
			{
				try {
					if (rs != null)
					{
						rs.close();
					}
					if (st != null)
					{
						st.close();
					}
					
				} catch (Exception e) {
					throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
				}
			}
		}

		private boolean CheckUpdByPk(Connection pConnection,ManagedEntity pManagedEntity) throws DataServiceException
		{ 
			PreparedStatement st = null;
			ResultSet rs = null;
			String query =null; 
		try{
			List definedUpdateCols = pManagedEntity.getDefinedColumns(UPDATE_COLUMNS);
			
					//Construction de selectUPDColumns
			StringBuffer stringBuffer = new StringBuffer();
			for (Iterator iter = TABLE_COLUMNS.listIterator() ; iter.hasNext() ;)
			{
				String colName = (String)iter.next();
				if (pManagedEntity.isColumnDefined(colName) && UPDATE_COLUMNS.contains(colName))
				{
					stringBuffer.append(" ? ");
					stringBuffer.append(COL_ALIAS_WORD);
					stringBuffer.append(" ");
				}
				stringBuffer.append(colName);
				
				if (iter.hasNext())
				{
					stringBuffer.append(" , ");
				}
			}
			String selectUpdColumns = stringBuffer.toString();
						
			String allColumns = Utils.concatStrings(TABLE_COLUMNS, null,null , " , ");	
			
			String keyColumns = Utils.concatStrings(mKeyColsName, null,null , " , ");		
			
			String whereClause = Utils.concatStrings(PK_COLUMNS, null, "=?", " AND ");
			
			query = "select count(*) from ( select "
					+ selectUpdColumns 
					+ " from " 
					+ FULLY_QUALIFIED_TABLE_NAME
					+ " where "
					+ whereClause
					+ " union all select " 
					+ allColumns
					+ " from "
					+ FULLY_QUALIFIED_TABLE_NAME
					+ " where not ("
					+ whereClause
					+ " )) ws_alias group by "
					+ keyColumns
					+ " having count(*) > 1 ";
					
			st = pConnection.prepareStatement(query);
			List parameterList = new ArrayList(definedUpdateCols);
			parameterList.addAll(PK_COLUMNS);
			//twice
			parameterList.addAll(PK_COLUMNS);
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pManagedEntity, parameterList);
			rs = st.executeQuery();
			return rs.next();
			}
		
		catch (SQLException e)
		{
			throw new DataServiceException(query, e);
		}
		finally
			{
			try {
				if (rs != null)
				{
					rs.close();
				}
				if (st != null)
				{
					st.close();
				}
				
			} catch (Exception e) {
				throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
			}
				
			}
		}

		private boolean CheckUpdByFilter(Connection pConnection,UpdateFilter pUpdateFilter) throws DataServiceException
		{
			PreparedStatement st = null;
			ResultSet rs = null;
			String query = null;
		try{
			List definedUpdateCols = pUpdateFilter.getManagedEntity().getDefinedColumns(UPDATE_COLUMNS);
			
					//Construction de selectUPDColumns
			StringBuffer stringBuffer = new StringBuffer();
			for (Iterator iter = TABLE_COLUMNS.listIterator() ; iter.hasNext() ;)
			{
				String colName = (String)iter.next();
				if (pUpdateFilter.getManagedEntity().isColumnDefined(colName) && UPDATE_COLUMNS.contains(colName))
				{
					stringBuffer.append(" ? ");
					stringBuffer.append(COL_ALIAS_WORD);
					stringBuffer.append(" ");
				}
				stringBuffer.append(colName);
				
				if (iter.hasNext())
				{
					stringBuffer.append(" , ");
				}
			}
			String selectUpdColumns = stringBuffer.toString();	
				
			String allColumns = Utils.concatStrings(TABLE_COLUMNS, null,null , " , ");	
			
			String keyColumns = Utils.concatStrings(mKeyColsName, null,null , " , ");		
			
			String whereClause = Utils.createWhereClause(pUpdateFilter.getUpdateDeleteFilter()); 
			
			if (whereClause ==null)
			{whereClause = "1=1";}
			
			query = "select count(*) from ( select "
					+ selectUpdColumns 
					+ " from " 
					+ FULLY_QUALIFIED_TABLE_NAME
					+ " where "
					+ whereClause
					+ " union all select " 
					+ allColumns
					+ " from "
					+ FULLY_QUALIFIED_TABLE_NAME
					+ " where not ("
					+ whereClause
					+ " )) "
					+ TAB_ALIAS_WORD
					+" "
					+ ALIAS_TABLE_NAME
					+" group by "
					+ keyColumns
					+ " having count(*) > 1 ";
			
			
					
			st = pConnection.prepareStatement(query);

			Utils.setParameters(getMetaData().getColumnsMeta(), st, pUpdateFilter.getManagedEntity(), definedUpdateCols);

			//twice --ICI
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pUpdateFilter.getUpdateDeleteFilter().getWhereEntity(), pUpdateFilter.getUpdateDeleteFilter().getWhereEntity().getDefinedColumns(), definedUpdateCols.size() + 1);
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pUpdateFilter.getUpdateDeleteFilter().getWhereEntity(), pUpdateFilter.getUpdateDeleteFilter().getWhereEntity().getDefinedColumns(),pUpdateFilter.getUpdateDeleteFilter().getWhereEntity().getDefinedColumns().size()+definedUpdateCols.size() + 1);

			rs = st.executeQuery();
			return rs.next();
			}
		
		catch (SQLException e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-10018", "ODIKM-STDKM-10018: Failed to execute the query : {0}", new Object[] {query});
		}
			finally
			{
				try {
					if (rs != null)
					{
						rs.close();
					}
					if (st != null)
					{
						st.close();
					}
					
				} catch (Exception e) {
					throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
				}
			}
		}

	}
	public class Constraint
	{	
		private String mName;
		private String mMessage;
		private String mCondition;
		//private List mInsertColumns;
		
		public Constraint(String pName, String pCondition, String pMessage)
		{
			mName = pName;
			mCondition = pCondition;
			mMessage = pMessage;
		}
		

		private boolean CheckIns(Connection pConnection, ManagedEntity pManagedEntity)  throws DataServiceException
		{ 
			PreparedStatement st = null;
			ResultSet rs = null;
			String query = null;
		try{
			List definedInsertedCols = pManagedEntity.getDefinedColumns(INSERT_COLUMNS);
			
					//Construction de selectUPDColumns
			StringBuffer stringBuffer = new StringBuffer();
			for (Iterator iter = TABLE_COLUMNS.listIterator() ; iter.hasNext() ;)
			{
				String colName = (String)iter.next();
				if (pManagedEntity.isColumnDefined(colName))
				{
					stringBuffer.append(" ? ");
				}
				else
				{
					stringBuffer.append(" null ");
				}
				stringBuffer.append(COL_ALIAS_WORD);
				stringBuffer.append(" ");

				stringBuffer.append(colName);
				
				if (iter.hasNext())
				{
					stringBuffer.append(" , ");
				}
			}
			String selectInsColumns = stringBuffer.toString();
				
			query = "select 1 from ( select distinct "
					+ selectInsColumns
					+ mDualTable
					+ " ) "
					+ TAB_ALIAS_WORD
					+" "
					+ ALIAS_TABLE_NAME
					+ " where not "
					+ mCondition;
					
			st = pConnection.prepareStatement(query);
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pManagedEntity, definedInsertedCols);
			rs = st.executeQuery();
			return rs.next();
			}
		

		catch (SQLException e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-10018", "ODIKM-STDKM-10018: Failed to execute the query : {0}", new Object[] {query});
		}
			finally
			{
				try {
					if (rs != null)
					{
						rs.close();
					}
					if (st != null)
					{
						st.close();
					}
					
				} catch (Exception e) {
					throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
				}
			}
		}

		private boolean CheckUpdByPk(Connection pConnection, ManagedEntity pManagedEntity) throws DataServiceException
		{ 
			PreparedStatement st = null;
			ResultSet rs = null;
			String query= null;
		try{
			List definedUpdateCols = pManagedEntity.getDefinedColumns(UPDATE_COLUMNS);
			

					//Construction de selectUPDColumns
			StringBuffer stringBuffer = new StringBuffer();
			for (Iterator iter = TABLE_COLUMNS.listIterator() ; iter.hasNext() ;)
			{
				String colName = (String)iter.next();
				if (pManagedEntity.isColumnDefined(colName) && UPDATE_COLUMNS.contains(colName))
				{
					stringBuffer.append(" ? ");
					stringBuffer.append(COL_ALIAS_WORD);
					stringBuffer.append(" ");
				}
				stringBuffer.append(colName);
				
				if (iter.hasNext())
				{
					stringBuffer.append(" , ");
				}
			}
			String selectUpdColumns = stringBuffer.toString();

			
			String whereClause = Utils.concatStrings(PK_COLUMNS, null, "=?", " AND ");
			
			query = "select 1 from ( select "
					+ selectUpdColumns 
					+ " from "
					+ FULLY_QUALIFIED_TABLE_NAME
					+ " where "
					+ whereClause
					+ " ) "
					+ TAB_ALIAS_WORD
					+ " "
					+ ALIAS_TABLE_NAME 
					+ " Where not "
					+ mCondition;
					
			st = pConnection.prepareStatement(query);
			List parameterList = new ArrayList(definedUpdateCols);
			
			parameterList.addAll(PK_COLUMNS);

			Utils.setParameters(getMetaData().getColumnsMeta(), st, pManagedEntity, parameterList);
			rs = st.executeQuery();
			return rs.next();
			}
		
		catch (SQLException e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-10018", "ODIKM-STDKM-10018: Failed to execute the query : {0}", new Object[] {query});
		}
			finally
			{
				try {
					if (rs != null)
					{
						rs.close();
					}
					if (st != null)
					{
						st.close();
					}
					
				} catch (Exception e) {
					throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
				}	
			}
		}

		private boolean CheckUpdByFilter(Connection pConnection,UpdateFilter pUpdateFilter) throws DataServiceException 
		{ 
			PreparedStatement st = null;
			ResultSet rs = null;
			String query = null;
		try{
			List definedUpdateCols = pUpdateFilter.getManagedEntity().getDefinedColumns(UPDATE_COLUMNS);

			//Construction de selectUPDColumns
			
			StringBuffer stringBuffer = new StringBuffer();
			for (Iterator iter = TABLE_COLUMNS.listIterator() ; iter.hasNext() ;)
			{
				String colName = (String)iter.next();
				if (pUpdateFilter.getManagedEntity().isColumnDefined(colName) && UPDATE_COLUMNS.contains(colName))
				{
					stringBuffer.append(" ? ");
					stringBuffer.append(COL_ALIAS_WORD);
					stringBuffer.append(" ");
				}
				stringBuffer.append(colName);
				
				if (iter.hasNext())
				{
					stringBuffer.append(" , ");
				}
			}
			String selectUpdColumns = stringBuffer.toString();
			
			String whereClause = Utils.createWhereClause(pUpdateFilter.getUpdateDeleteFilter());
			
			if (whereClause ==null)
			{whereClause = "1=1";}
			
			query = "select 1 from ( select "
					+ selectUpdColumns 
					+ " from " 
					+ FULLY_QUALIFIED_TABLE_NAME
					+ " where "
					+ whereClause
					+ " ) "
					+ TAB_ALIAS_WORD
					+ " "
					+ ALIAS_TABLE_NAME 
					+ " Where not "
					+ mCondition;		
			st = pConnection.prepareStatement(query);

			Utils.setParameters(getMetaData().getColumnsMeta(), st, pUpdateFilter.getManagedEntity(), definedUpdateCols);

			Utils.setParameters(getMetaData().getColumnsMeta(), st, pUpdateFilter.getUpdateDeleteFilter().getWhereEntity(), pUpdateFilter.getUpdateDeleteFilter().getWhereEntity().getDefinedColumns(), definedUpdateCols.size() + 1);


			rs = st.executeQuery();
			return rs.next();
			}
		
		

		catch (SQLException e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-10018", "ODIKM-STDKM-10018: Failed to execute the query : {0}", new Object[] {query});
		}

			finally
			{
				try {
					if (rs != null)
					{
						rs.close();
					}
					if (st != null)
					{
						st.close();
					}
					
				} catch (Exception e) {
					throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
				}
			}
		}

	}


	public DataServiceMeta getMetaData()
	{
		return mDataServiceMeta;
	}
	
	private Connection getConnection() throws DataServiceException
	{
		return Utils.getConnectionFromDataSource("<%=odiRef.getTargetTable("WS_DATA_SOURCE")%>", false);     
	}
	


	private String getSelectQueryByPK() throws DataServiceException
	{
		String whereClause = Utils.concatStrings(PK_COLUMNS, null, "=?", " AND "); //$NON-NLS-1$//$NON-NLS-2$
		return Utils.createSelectQuery(SELECT_COLUMNS, FULLY_QUALIFIED_TABLE_NAME, whereClause, null);
	}
	private void checkIns(Connection pcon,ManagedEntity pManagedEntity) throws DataServiceException
	{
		
		MandatoryColumn MCol;
		UniqueKey UKey;
		Constraint Cons;
		try {
			for (int i = 0 ; i < mMandatorys.size() ; i++)
			{
				MCol = (MandatoryColumn)mMandatorys.get(i);
				if (!MCol.CheckIns(pcon,pManagedEntity) )
				{throw new DataServiceException(MCol.mMessage);}
			}
			for (int i = 0 ; i < mUniqueKeys.size() ; i++)
			{
				UKey = (UniqueKey)mUniqueKeys.get(i);
				if (UKey.CheckIns(pcon,pManagedEntity) )
				{throw new DataServiceException(UKey.mMessage);}
			}
			for (int i = 0 ; i < mConditions.size() ; i++)
			{
				Cons = (Constraint)mConditions.get(i);
				if (Cons.CheckIns(pcon,pManagedEntity) )
				{throw new DataServiceException(Cons.mMessage);}
			}
			for (int i = 0 ; i < mReferences.size() ; i++)
			{
				Cons = (Constraint)mReferences.get(i);
				if (Cons.CheckIns(pcon,pManagedEntity) )
				{throw new DataServiceException(Cons.mMessage);}
			}
		}
			
		catch (DataServiceException e) 
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
			{
				
			}
		
		
		
	}

	private void checkUpdByPk(Connection pcon,ManagedEntity pManagedEntity) throws DataServiceException
	{
		
		MandatoryColumn MCol;
		UniqueKey UKey;
		Constraint Cons;
		try {
			for (int i = 0 ; i < mMandatorys.size() ; i++)
			{
				MCol = (MandatoryColumn)mMandatorys.get(i);
				if (!MCol.CheckUpdByPk(pcon,pManagedEntity) )
				{throw new DataServiceException(MCol.mMessage);}
			}
			for (int i = 0 ; i < mUniqueKeys.size() ; i++)
			{
				UKey = (UniqueKey)mUniqueKeys.get(i);
				if (UKey.CheckUpdByPk(pcon,pManagedEntity) )
				{throw new DataServiceException(UKey.mMessage);}
			}
			for (int i = 0 ; i < mConditions.size() ; i++)
			{
				Cons = (Constraint)mConditions.get(i);
				if (Cons.CheckUpdByPk(pcon,pManagedEntity) )
				{throw new DataServiceException(Cons.mMessage);}
			}
			for (int i = 0 ; i < mReferences.size() ; i++)
			{
				Cons = (Constraint)mReferences.get(i);
				if (Cons.CheckUpdByPk(pcon,pManagedEntity) )
				{throw new DataServiceException(Cons.mMessage);}
			}
		}
			
		catch (DataServiceException e) 
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
			{
				
			}
		
		
		
	}	
	
	private void CheckUpdByFilter(Connection pcon,UpdateFilter pManagedEntity)  throws DataServiceException
	{
		
		MandatoryColumn MCol;
		UniqueKey UKey;
		Constraint Cons;
		try {
			for (int i = 0 ; i < mMandatorys.size() ; i++)
			{
				MCol = (MandatoryColumn)mMandatorys.get(i);
				if (!MCol.CheckUpdByFilter(pcon,pManagedEntity) )
				{throw new DataServiceException(MCol.mMessage);}
			}
			for (int i = 0 ; i < mUniqueKeys.size() ; i++)
			{
				UKey = (UniqueKey)mUniqueKeys.get(i);
				if (UKey.CheckUpdByFilter(pcon,pManagedEntity) )
				{throw new DataServiceException(UKey.mMessage);}
			}
			for (int i = 0 ; i < mConditions.size() ; i++)
			{
				Cons = (Constraint)mConditions.get(i);
				if (Cons.CheckUpdByFilter(pcon,pManagedEntity) )
				{throw new DataServiceException(Cons.mMessage);}
			}
			for (int i = 0 ; i < mReferences.size() ; i++)
			{
				Cons = (Constraint)mReferences.get(i);
				if (Cons.CheckUpdByFilter(pcon,pManagedEntity) )
				{throw new DataServiceException(Cons.mMessage);}
			}
		}
			
		catch (DataServiceException e) 
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
			{
				
			}
		
		
		
	}	
	
	public ManagedEntity get<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(ManagedEntity pInputManagedEntity) throws Exception
	{
		pInputManagedEntity.assertColsDefined(PK_COLUMNS);

		Connection c = null;
		PreparedStatement st = null;
		ResultSet rs = null;

		try
		{
			c = getConnection();

			st = c.prepareStatement(getSelectQueryByPK());
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pInputManagedEntity, PK_COLUMNS);
			rs = st.executeQuery();
			return ManagedEntity.createFromResultSet(rs, SELECT_COLUMNS);
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	public ManagedEntityList get<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>List(ManagedEntityList pInputManagedEntityList) throws Exception
	{
		pInputManagedEntityList.assertColsDefined(PK_COLUMNS);
		Connection c = null;
		PreparedStatement st = null;
		ResultSet rs = null;

		try
		{
			c = getConnection();
			ManagedEntityList outputList = new ManagedEntityList();
			st = c.prepareStatement(getSelectQueryByPK());
			for (int i = 0 ; i < pInputManagedEntityList.size() ; i++)
			{
				ManagedEntity inputManagedEntity = pInputManagedEntityList.getManagedEntity(i);
				st.clearParameters();
				Utils.setParameters(getMetaData().getColumnsMeta(), st, inputManagedEntity, PK_COLUMNS);
				rs = st.executeQuery();
				outputList.addManagedEntity(ManagedEntity.createFromResultSet(rs, SELECT_COLUMNS));
				rs.close();
			}
			return outputList;
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	public ManagedEntityList get<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>Filter(QueryFilter pQueryFilter) throws Exception
	{
		Connection c = null;
		PreparedStatement st = null;
		ResultSet rs = null;
		try
		{
			c = getConnection();
			
			st = c.prepareStatement(Utils.createSelectQuery(SELECT_COLUMNS, FULLY_QUALIFIED_TABLE_NAME, Utils.createWhereClause(pQueryFilter), pQueryFilter.getOrderByExpression()));
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pQueryFilter.getWhereEntity(), pQueryFilter.getWhereEntity().getDefinedColumns());
			rs = st.executeQuery();
			
			ManagedEntityList outputList = ManagedEntityList.createFromResultSet(rs, SELECT_COLUMNS, pQueryFilter.getMaxRowCount());
			
			return outputList;
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	private int insert(Connection pConnection, ManagedEntity pManagedEntity) throws Exception
	{
		PreparedStatement st = null;
		
		try
		{	
			if (pManagedEntity.getDefinedColumns().size() > 0)
			{
			checkIns(pConnection,pManagedEntity);
			
			List definedInsertCols = pManagedEntity.getDefinedColumns(INSERT_COLUMNS);			
						
			st = pConnection.prepareStatement(Utils.createInsertQuery(definedInsertCols, FULLY_QUALIFIED_TABLE_NAME));
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pManagedEntity, definedInsertCols);
			return st.executeUpdate();
			}
			else
			{
				return 0 ;
			}
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (st != null)
			{
				st.close();
			}
		}
	}

	public QueryResponse add<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(ManagedEntity pManagedEntity) throws Exception
	{		
		Connection c = null;
		try
		{		
			c = getConnection();				

			int nbAffected = insert(c, pManagedEntity);
			c.commit();
			return new QueryResponse(nbAffected);
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	public QueryResponse add<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>List(ManagedEntityList pManagedEntityList) throws Exception
	{
		Connection c = null;
		try
		{
			c = getConnection();

			int nbAffected = 0;
			for (int i = 0 ; i < pManagedEntityList.size() ; i++)
			{
				ManagedEntity managedEntity = pManagedEntityList.getManagedEntity(i);
				nbAffected += insert(c, managedEntity);			
			}
			c.commit();
			return new QueryResponse(nbAffected);
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	private int updateByPK(Connection pConnection, ManagedEntity pManagedEntity) throws Exception
	{
		PreparedStatement st = null;
		
		try
		{	
			checkUpdByPk(pConnection,pManagedEntity);


			List definedUpdateCols = pManagedEntity.getDefinedColumns(UPDATE_COLUMNS);			
			String query = Utils.createUpdateQuery(definedUpdateCols, FULLY_QUALIFIED_TABLE_NAME, Utils.concatStrings(PK_COLUMNS, null, "=?", " AND ")); //$NON-NLS-1$ //$NON-NLS-2$);
			List parameterList = new ArrayList(definedUpdateCols);
			parameterList.addAll(PK_COLUMNS);			
			st = pConnection.prepareStatement(query);
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pManagedEntity, parameterList);
			return st.executeUpdate();
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (st != null)
			{
				st.close();
			}
		}
	}

	public QueryResponse update<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(ManagedEntity pManagedEntity) throws Exception
	{
		pManagedEntity.assertColsDefined(PK_COLUMNS);
		Connection c = null;
		try
		{
			c = getConnection();

			int nbAffected = updateByPK(c, pManagedEntity);
			c.commit();
			return new QueryResponse(nbAffected);
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	public QueryResponse update<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>List(ManagedEntityList pManagedEntityList) throws Exception
	{
		pManagedEntityList.assertColsDefined(PK_COLUMNS);
		Connection c = null;
		try
		{
			c = getConnection();
			
			int nbAffected = 0;			
			for (int i = 0 ; i < pManagedEntityList.size() ; i++)
			{
				ManagedEntity managedEntity = pManagedEntityList.getManagedEntity(i);
				nbAffected += updateByPK(c, managedEntity);	
			}
			c.commit();
			return new QueryResponse(nbAffected);
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	public QueryResponse update<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>Filter(UpdateFilter pUpdateFilter) throws Exception
	{
		Connection c = null;
		PreparedStatement st = null;
		
		try
		{
			if (pUpdateFilter.getManagedEntity().getDefinedColumns().size() > 0)
			{
				c = getConnection();
				
				CheckUpdByFilter(c,pUpdateFilter);
	
				List definedUpdateCols = pUpdateFilter.getManagedEntity().getDefinedColumns(UPDATE_COLUMNS);
				String query = Utils.createUpdateQuery(definedUpdateCols, FULLY_QUALIFIED_TABLE_NAME, Utils.createWhereClause(pUpdateFilter.getUpdateDeleteFilter()));
				st = c.prepareStatement(query);
				Utils.setParameters(getMetaData().getColumnsMeta(), st, pUpdateFilter.getManagedEntity(), definedUpdateCols);
				Utils.setParameters(getMetaData().getColumnsMeta(), st, pUpdateFilter.getUpdateDeleteFilter().getWhereEntity(), pUpdateFilter.getUpdateDeleteFilter().getWhereEntity().getDefinedColumns(), definedUpdateCols.size() + 1);
				int nbAffected = st.executeUpdate();
				c.commit();
				return new QueryResponse(nbAffected);
			}
			else
			{
				return new QueryResponse(0);
			}
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}	
	
	private int deleteByPK(Connection pConnection, ManagedEntity pManagedEntity) throws Exception
	{
		PreparedStatement st = null;
		try
		{			
			String query = Utils.createDeleteQuery(FULLY_QUALIFIED_TABLE_NAME, Utils.concatStrings(PK_COLUMNS, null, "=?", " AND ")); //$NON-NLS-1$ //$NON-NLS-2$);						
			st = pConnection.prepareStatement(query);
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pManagedEntity, PK_COLUMNS);
			return st.executeUpdate();
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (st != null)
			{
				st.close();
			}
		}
	}
	
	public QueryResponse delete<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(ManagedEntity pManagedEntity) throws Exception
	{
		pManagedEntity.assertColsDefined(PK_COLUMNS);
		Connection c = null;
		try
		{
			c = getConnection();

			int nbAffected = deleteByPK(c, pManagedEntity);
			c.commit();
			return new QueryResponse(nbAffected);
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}
	
	public QueryResponse delete<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>List(ManagedEntityList pManagedEntityList) throws Exception
	{
		pManagedEntityList.assertColsDefined(PK_COLUMNS);
		Connection c = null;
		try
		{
			c = getConnection();

			int nbAffected = 0;			
			for (int i = 0 ; i < pManagedEntityList.size() ; i++)
			{
				ManagedEntity managedEntity = pManagedEntityList.getManagedEntity(i);
				nbAffected += deleteByPK(c, managedEntity);
			}
			c.commit();							
			return new QueryResponse(nbAffected);
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}

	public QueryResponse delete<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>Filter(UpdateDeleteFilter pDeleteFilter) throws Exception
	{
		Connection c = null;
		PreparedStatement st = null;
		try
		{
			c = getConnection();
						
			String query = Utils.createDeleteQuery(FULLY_QUALIFIED_TABLE_NAME, Utils.createWhereClause(pDeleteFilter));
			st = c.prepareStatement(query);		
			Utils.setParameters(getMetaData().getColumnsMeta(), st, pDeleteFilter.getWhereEntity(), pDeleteFilter.getWhereEntity().getDefinedColumns());			
			int nbAffected = st.executeUpdate();
			c.commit();
			return new QueryResponse(nbAffected);
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}
	}	
	
	

	
	<% if (odiRef.getTargetTable("IND_JRN").equals("1") && odiRef.getJrnInfo("JRN_METHOD").equals("S")) { %>
	
	private static final List CDC_SELECT_COLUMNS = new ArrayList(SELECT_COLUMNS);
	static 
	{
		CDC_SELECT_COLUMNS.add("JRN_FLAG");
		CDC_SELECT_COLUMNS.add("JRN_DATE");	
	}	
	

	public CDCManagedEntityList getChanged<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(CDCQuery pCDCQuery) throws Exception
	{
		Connection c = null;
		PreparedStatement st = null;
		ResultSet rs = null;
		try
		{
			c = getConnection();
						
			st = c.prepareStatement(Utils.createSelectQuery(CDC_SELECT_COLUMNS, "<%=odiRef.getJrnInfo("JRN_FULL_DATA_VIEW")%>", "JRN_SUBSCRIBER = ?", null));
			st.setString(1, pCDCQuery.getSubscriberName());			
			rs = st.executeQuery();
			
			CDCManagedEntityList outputList = CDCManagedEntityList.createFromResultSet(rs, SELECT_COLUMNS, pCDCQuery.getMaxRowCount());
						
			return outputList;
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}		
	}

	public CDCManagedEntityList consumeChanged<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(CDCQuery pCDCQuery) throws Exception
	{
		Connection c = null;
		PreparedStatement st = null;
		ResultSet rs = null;
		try
		{
			c = getConnection();

			// If MaxRowCount is specified we can't guarantee that the return CDCManagedEntity list are the most recent 
			// (if some changes occurs on the record matching the pk returned by the first statement) but no changes will be lost
			
			// Get Managed Entity PKs value to lock			
			st = c.prepareStatement(Utils.createSelectQuery(PK_COLUMNS, "<%=odiRef.getJrnInfo("JRN_FULL_DATA_VIEW")%>", "JRN_SUBSCRIBER = ?", null));
			st.setString(1, pCDCQuery.getSubscriberName());
			rs = st.executeQuery();
			ManagedEntityList pks = ManagedEntityList.createFromResultSet(rs, PK_COLUMNS, pCDCQuery.getMaxRowCount());
			rs.close();
			st.close();
																			
			// Lock Journalize Table
			st = c.prepareStatement("update <%=odiRef.getJrnInfo("JRN_FULL_NAME")%> set JRN_CONSUMED = '1' where JRN_SUBSCRIBER=? AND " + Utils.concatStrings(PK_COLUMNS, null, "=?", " AND "));
			for (int i = 0 ; i < pks.size() ; i++)
			{
				ManagedEntity managedEntityPk = pks.getManagedEntity(i);			
				st.clearParameters();
				st.setString(1, pCDCQuery.getSubscriberName());
				Utils.setParameters(getMetaData().getColumnsMeta(), st, managedEntityPk, PK_COLUMNS, 2);				
				st.executeUpdate();				
			}	
			st.close();
						
			// Creating CDCManagedEntityList			
			st = c.prepareStatement(Utils.createSelectQuery(CDC_SELECT_COLUMNS, "<%=odiRef.getJrnInfo("JRN_FULL_VIEW")%>", "JRN_SUBSCRIBER = ?", null));
			st.setString(1, pCDCQuery.getSubscriberName());
			rs = st.executeQuery();								
			CDCManagedEntityList outputList = CDCManagedEntityList.createFromResultSet(rs, SELECT_COLUMNS, null);			
			st.close();
			
			// Cleanup journalized Table
			st = c.prepareStatement("delete from <%=odiRef.getJrnInfo("JRN_FULL_NAME")%> where JRN_CONSUMED = '1' and JRN_SUBSCRIBER = ?");
			st.setString(1, pCDCQuery.getSubscriberName());
			st.executeUpdate();
			st.close();			
			
			c.commit();							
			return outputList;
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}		
	}
	<% } %>
	<% if (odiRef.getTargetTable("IND_JRN").equals("1") && odiRef.getJrnInfo("JRN_METHOD").equals("C")) { %>
	
	private static final List CDC_SELECT_COLUMNS = new ArrayList(SELECT_COLUMNS);
	static 
	{
		CDC_SELECT_COLUMNS.add("JRN_FLAG");
		CDC_SELECT_COLUMNS.add("JRN_DATE");	
	}	
	

	public CDCManagedEntityList getChanged<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(CDCQuery pCDCQuery) throws Exception
	{
		Connection c = null;
		PreparedStatement st = null;
		ResultSet rs = null;
		try
		{
			c = getConnection();
						
			st = c.prepareStatement(Utils.createSelectQuery(CDC_SELECT_COLUMNS, "<%=odiRef.getJrnInfo("JRN_FULL_DATA_VIEW")%>", "JRN_SUBSCRIBER = ?", null));
			st.setString(1, pCDCQuery.getSubscriberName());			
			rs = st.executeQuery();
			
			CDCManagedEntityList outputList = CDCManagedEntityList.createFromResultSet(rs, SELECT_COLUMNS, pCDCQuery.getMaxRowCount());
						
			return outputList;
		}
		catch (Exception e)
		{
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}		
	}
	
	public CDCManagedEntityList consumeChanged<%=odiRef.getTargetTable("WS_ENTITY_NAME")%>(CDCQuery pCDCQuery) throws Exception
	{
		Connection c = null;
		PreparedStatement st = null;
		ResultSet rs = null;
		try
		{
			c = getConnection();

			// we don't take care with MaxRowCount 
	
			st = c.prepareStatement(Utils.createSelectQuery(CDC_SELECT_COLUMNS, "<%=odiRef.getJrnInfo("JRN_FULL_VIEW")%>", "JRN_SUBSCRIBER = ?", null));
			st.setString(1, pCDCQuery.getSubscriberName());
			rs = st.executeQuery();								
			CDCManagedEntityList outputList = CDCManagedEntityList.createFromResultSet(rs, SELECT_COLUMNS, null);			
			st.close();
						
			
			c.commit();							
			return outputList;
		}
		catch (Exception e)
		{
			if (c != null && !c.isClosed())
			{
				c.rollback();
			}
			throw new OdiSKMException(e, "ODIKM-STDKM-11000", "ODIKM-STDKM-11000: Generic Error", null);
		}
		finally
		{
			if (rs != null)
			{
				rs.close();
			}
			if (st != null)
			{
				st.close();
			}
			if (c != null && !c.isClosed())
			{
				c.close();
			}
		}		
	}
	<% } %>


}
]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="GlobalId" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[102]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Target Technology]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[DEF_I_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_LINE_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_PROJECT.1]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[236fd394-6f34-48ff-9081-6e4dd9bea0f8]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[DEMO]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_PROJECT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[4]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.6551]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[04659f12-d651-4b5f-961b-999c42ba4c31]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.6552]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[60df8445-feec-4523-b422-53c798d05835]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TRT.327]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[38e0215c-2ea2-48f1-94ad-9d4a2017b900]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[DEMO.SKM Oracle]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_PROJECT.SNP_TRT]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[4.10]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[11]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.09]]></Field>
</Object>
</SunopsisExport>
